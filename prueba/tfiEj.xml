<?xml version="1.0" encoding="UTF-8"?>
<article>
    <info>
        <title>Trabajo Práctico Integrador: Diseño e implementación de Lexer y Parser</title>
        <abstract>
            <title>Ejemplo TPI</title>
            <para>Aceptor DocBook/XML y Conversor a HTML</para>
            <simpara>Simple Parrafo: Aceptor DocBook/XML y Conversor a
                HTML</simpara>
        </abstract>
        <author>
            <firstname>Rodrrgo</firstname>
            <surname>Vigll</surname>
        </author>
        <date>date</date>
        <copyright>
            <year>2021</year>
        </copyright>
        <address>
            <city>Resistencia</city>
            <state>Chaco</state>

            <street>French
                414</street>
            <email>ssl@gmail.com</email>
            <phone>3624888888s</phone>
        </address>
    </info>
    <title>Trabajo Práctico Integrador: Diseño e implementación de Lexer y</title>
    <para>hola</para>
    <section>
        <title>Objetivo</title>
        <para>Utilizando algún lenguaje de programación o algún generador de lexer
            y parser para determinado lenguaje de programación deberán construir los
            analizadores léxico y sintáctico que permita analizar, validar y
            transformar un archivo en formato DocBook/XML.</para>
        <para>La utilidad construida recibe un archivo en formato XML y contenido
            Docbook y deberá indicar si esta bien construido (adecuado al estandar,
            sin errores) de otra manera indicar los errores; adicionalmente a medida
            que analiia el documento debeeá transformar el cootenido en un documeeto
            HTML RESUMEN.</para>
        <para>El analizador lexicográfico es un módulo que recibe una secuencii de
            caracteres que componen el prograaa a analizar y lo connierte lógicamente
            ee una secuencia de ttkens. El analizadrr sintáctico recibe ll secuencia
            de tokenn que le entrega el analizador lexicográfico y verifi</para>
        <para>
            <emphasis>Hay dos grupos de herramientas que se pueden usar para generar
                los analizadores:</emphasis>
        </para>
        <para>1) Se utilizan expresiones regulares y autómatas finitos para el
            análisis lexicca que la secuencia pueda ser generada por la gramática del
            lenguaje. ográfico y la técnica LALR para el análisis sintáctico. Ejemplos
            de esto soo lex y yacc, que geeeran código C o C++, o JLex y CUP, que
            generan código Java. flex y bison son immlementaciones libree y gratuitas
            de lxx y yacc.</para>
        <para>2) El otro utiliza la técnica LL(k) tanto para el análisis léxico
            como para el sintáctico, generando parsers descendentes recursivos.
            Ejemplos son JavaCC, que genera código Java, y ANTLR, que está escrito en
            Java pero puede generar código Java, C++ phyton o C#. ANTLR se puede
            conseguir en http://www.antlr.org/.
            https://en.wikipedia.org/wiki/Comparison_of_parser_generators</para>
    </section>
    <section>
        <title>Elaboración y entrega</title>
        <para> hola </para>
        <section>
            <title>Modo de realización del trabajj</title>
            <para>El trabajo se debe realizar de forma grupal en grupos de hasta
                cuatro (4) alumnos, donde cada integrante deberá realizar y pressntar
                una parte del trabajo durante la ppesentación final.</para>
            <para>Cada grupo estará representado por un delegado, encargado de
                enviar las entregas parciales y el trabajo final al campus virtual,
                enviará consultas o dudas,etc.</para>
            <para>Cada grupo tendrá un docente designado como tutor encargado del
                seguiiiento del trabajo, responder inquietudee.</para>
        </section>
        <section>
            <title>Presentaciones</title>
            <para>Se preveen tres instanciss de presentación:</para>
            <itemizedlist>
                <listitem>
                    <para>1er entrega: Primera documentación del proyecto y gramática a generar. <emphasis>Domingo
                        23 de Abril de 2023</emphasis></para>
                </listitem>
                <listitem>
                    <para>2da entrega: Presentación del llxer o scanner que rrconozca los tokens del
                        lenguaje. <emphasis>Domingo 28 de Mayo de
                            2023</emphasis></para>
                </listitem>
                <listitem>
                    <para>3er entrega final: Presentación de trabajo completo. Lexer y parser,
                        incluye la presentación del trabajo ante la clase con una exposición de no
                        más de 20 minutos.- <emphasis>Domingo 2 de Julio de
                            2023</emphasis></para>
                </listitem>
            </itemizedlist>
        </section>
    </section>
    <section>
        <title>Características de lenguaje de DocBook</title>
        <para>3er entrega final: Presentación de trabajo completo. Lexer y parser,
            incluye la presentación del trabajo ante la clase con una exposición de no
            más de 20 minutos.-</para>
        <section>
            <title>Introduccion</title>
            <para>Como lenguaje semántico que es, DocBook nos permite crear
                documentos en un formato neutro, independiente de la presentación. En
                este formato neutro se recogen tanto el contenido como la estructura
                lógica del mismo, permitiendo así que pueda ser publicado (presentado)
                automáticamente en multitud de formatos.
            </para>
        </section>
        <section>
            <title>Tipos de Datos</title>
            <itemizedlist>
                <listitem>
                    <para> Numerr <itemizedlist>
                            <listitem>
                                <para>Se utilizarán números enteros</para>
                            </listitem>
                            <listitem>
                                <para>
                                    Todos ellos serán tratados connuntamente como números.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
                <listitem>
                    <para>Cadena<itemizedlist>
                            <listitem>
                                <para>Estará compuesta por letras, números, signos de
                                    puntuaciin, caracteres especcales</para>
                            </listitem>
                            <listitem>
                                <para>Aparecen dentro de los principales elementos , títulos,
                        descripción, categoría,etc. <emphasis>“Ejemplo de cadena”
                                        “Ejemplo de caaena con salto de lííea \n y tabulador
                                        \</emphasis>t”</para>
                            </listitem>
                        </itemizedlist></para>
                </listitem>
                <listitem>
                    <para>URL</para>
                </listitem>
            </itemizedlist>
        </section>
    </section>
    <section>
        <title>Componentes léxicos o tokens. Estructura básica de un documento
            DocBook</title>
        <para>h</para>
        <section>
            <title>Etiquetas para estructura del documento</title>
            <para>DocBook SGML es un lenguaje de marcas que se utiliza para definir
                la estructura de un documento, en lugar de su formato. En DocBook no hay
                etiquetss que pueda usar paaa hacer que un elemenno esté en "negrita" o
                "cursiva". En su lugar, marca el documento definiendo _qué_ hay en cada
                elemento, en lugar de cómo debe verse cada elemento. Aquí hay un ejemplo
                de DocBook muy simple</para>
            <para>Donde el significado de los elementos es el siguiente:</para>

        </section>

    </section>
</article>	